# Tạo database
CREATE DATABASE IF NOT EXISTS my_food;
USE my_food;

# Tạo bảng users
CREATE TABLE IF NOT EXISTS users (
  user_id INT AUTO_INCREMENT PRIMARY KEY,
  full_name VARCHAR(255),
  email VARCHAR(255)
);

# Tạo bảng food_types
CREATE TABLE IF NOT EXISTS food_types (
  type_id INT AUTO_INCREMENT PRIMARY KEY,
  type_name VARCHAR(255)
);

# Tạo bảng restaurants
CREATE TABLE IF NOT EXISTS restaurants (
  res_id INT AUTO_INCREMENT PRIMARY KEY,
  res_name VARCHAR(255),
  image VARCHAR(255),
  description VARCHAR(255)
);

# Tạo bảng foods
CREATE TABLE IF NOT EXISTS foods (
  food_id INT AUTO_INCREMENT PRIMARY KEY,
  food_name VARCHAR(255),
  image VARCHAR(255),
  price FLOAT,
  description VARCHAR(255),
  type_id INT,
  FOREIGN KEY (type_id) REFERENCES food_types(type_id)
);

# Tạo bảng sub_foods
CREATE TABLE IF NOT EXISTS sub_foods (
  sub_id INT AUTO_INCREMENT PRIMARY KEY,
  sub_name VARCHAR(255),
  sub_price FLOAT,
  food_id INT,
  FOREIGN KEY (food_id) REFERENCES foods(food_id)
);

# Tạo bảng orders
CREATE TABLE IF NOT EXISTS orders (
  user_id INT,
  food_id INT,
  amount INT,
  code VARCHAR(255),
  arr_sub_id VARCHAR(255),
  PRIMARY KEY (user_id),
  FOREIGN KEY (user_id) REFERENCES users(user_id),
  FOREIGN KEY (food_id) REFERENCES foods(food_id)
);

# Tạo bảng rate_res
CREATE TABLE IF NOT EXISTS rate_res (
  user_id INT,
  res_id INT,
  amount INT,
  date_rate DATETIME,
  FOREIGN KEY (user_id) REFERENCES users(user_id),
  FOREIGN KEY (res_id) REFERENCES restaurants(res_id)
);

# Tạo bảng like_res
CREATE TABLE IF NOT EXISTS like_res (
  user_id INT,
  res_id INT,
  date_like DATETIME,
  FOREIGN KEY (user_id) REFERENCES users(user_id),
  FOREIGN KEY (res_id) REFERENCES restaurants(res_id)
);

# Thêm dữ liệu mẫu
INSERT INTO users (full_name, email)
VALUES
  ('John Doe', 'john.doe@example.com'),
  ('Jane Smith', 'jane.smith@example.com'),
  ('David Johnson', 'david.johnson@example.com'),
  ('Sarah Wilson', 'sarah.wilson@example.com'),
  ('Michael Brown', 'michael.brown@example.com');

INSERT INTO food_types (type_name)
VALUES
  ('Italian'),
  ('Japanese'),
  ('American'),
  ('Healthy');

INSERT INTO restaurants (res_name, image, description)
VALUES
  ('Restaurant A', 'restaurant_a.jpg', 'Cozy restaurant with a variety of dishes'),
  ('Restaurant B', 'restaurant_b.jpg', 'Modern restaurant specializing in seafood');

INSERT INTO foods (food_name, image, price, description, type_id)
VALUES
  ('Pizza', 'pizza.jpg', 10.99, 'Delicious pizza with various toppings', 1),
  ('Sushi', 'sushi.jpg', 15.99, 'Fresh and authentic sushi rolls', 2),
  ('Burger', 'burger.jpg', 8.99, 'Juicy beef burger with fries', 3),
  ('Salad', 'salad.jpg', 7.99, 'Fresh and healthy salad options', 4);

INSERT INTO sub_foods (sub_name, sub_price, food_id)
VALUES
  ('Pepperoni', 1.5, 1),
  ('California Roll', 2.5, 2),
  ('Cheeseburger', 1.0, 3),
  ('Greek Salad', 1.5, 4);

INSERT INTO orders (user_id, food_id, amount, code, arr_sub_id)
VALUES
  (1, 1, 2, 'ORDER123', '1,3'),
  (2, 2, 1, 'ORDER456', '2'),
  (3, 3, 3, 'ORDER789', '3,4'),
  (4, 4, 1, 'ORDER987', '4'),
  (5, 1, 2, 'ORDER654', '1,2');

INSERT INTO rate_res (user_id, res_id, amount, date_rate)
VALUES
  (1, 1, 5, '2023-06-01 10:00:00'),
  (2, 1, 4, '2023-06-02 11:30:00'),
  (3, 2, 5, '2023-06-03 12:45:00'),
  (4, 2, 4, '2023-06-04 14:20:00'),
  (5, 1, 5, '2023-06-05 15:50:00');

INSERT INTO like_res (user_id, res_id, date_like)
VALUES
  (1, 1, '2023-06-01 10:00:00'),
  (2, 1, '2023-06-02 11:30:00'),
  (3, 2, '2023-06-03 12:45:00'),
  (4, 2, '2023-06-04 14:20:00'),
  (5, 1, '2023-06-05 15:50:00');

#Tìm 5 người đã like nhà hàng nhiều nhất:

SELECT users.full_name, COUNT(like_res.user_id) AS total_likes
FROM users
JOIN like_res ON users.user_id = like_res.user_id
GROUP BY users.user_id
ORDER BY total_likes DESC
LIMIT 5;

#Tìm 2 nhà hàng có lượt like nhiều nhất:

SELECT restaurants.res_name, COUNT(like_res.res_id) AS total_likes
FROM restaurants
JOIN like_res ON restaurants.res_id = like_res.res_id
GROUP BY restaurants.res_id
ORDER BY total_likes DESC
LIMIT 2;

#Tìm người đã đặt hàng nhiều nhất:

SELECT users.full_name, COUNT(orders.user_id) AS total_orders
FROM users
JOIN orders ON users.user_id = orders.user_id
GROUP BY users.user_id
ORDER BY total_orders DESC
LIMIT 1;

#Tìm người dùng không hoạt động trong hệ thống (không đặt hàng, không like, không đánh giá nhà hàng):

SELECT users.full_name
FROM users
LEFT JOIN orders ON users.user_id = orders.user_id
LEFT JOIN like_res ON users.user_id = like_res.user_id
LEFT JOIN rate_res ON users.user_id = rate_res.user_id
WHERE orders.user_id IS NULL AND like_res.user_id IS NULL AND rate_res.user_id IS NULL;


#Tính trung bình sub_foods của một food:

SELECT foods.food_name, AVG(sub_foods.sub_price) AS avg_sub_price
FROM foods
JOIN sub_foods ON foods.food_id = sub_foods.food_id
GROUP BY foods.food_id;
